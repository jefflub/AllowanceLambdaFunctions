package in.lubetk.allowance.db;

import java.util.HashSet;
import java.util.Random;
import java.util.Set;

import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAutoGeneratedKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBHashKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBIndexHashKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapper;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBTable;

@DynamoDBTable(tableName = "Kids")
public class Kid
{
	private String kidId;
	private String emailAddress;
	private String name;
	private int allowance;
	private Set<String> buckets;
	private String viewToken = generateViewToken();
	
	@DynamoDBHashKey
	@DynamoDBAutoGeneratedKey
	public String getKidId()
	{
		return kidId;
	}
	public void setKidId(String kidId)
	{
		this.kidId = kidId;
	}
	
	public String getEmailAddress()
	{
		return emailAddress;
	}
	public void setEmailAddress(String emailAddress)
	{
		this.emailAddress = emailAddress;
	}
	
	public String getName()
	{
		return name;
	}
	public void setName(String name)
	{
		this.name = name;
	}
	
	public int getAllowance()
	{
		return allowance;
	}
	public void setAllowance(int allowance)
	{
		this.allowance = allowance;
	}
	
	@DynamoDBIndexHashKey(globalSecondaryIndexName = "ViewTokenIndex")
	public String getViewToken()
	{
		return viewToken;
	}
	public void setViewToken(String viewToken)
	{
		this.viewToken = viewToken;
	}
	
	public Set<String> getBuckets()
	{
		return buckets;
	}
	public void setBuckets(Set<String> buckets)
	{
		this.buckets = buckets;
	}
	public void addBucket(String bucketId)
	{
		if (buckets == null)
			buckets = new HashSet<String>();
		buckets.add(bucketId);
	}
	
	public static Kid loadFromId( DynamoDBMapper mapper, String id )
	{
		return mapper.load(Kid.class, id);
	}
	
	private static final int TOKEN_LENGTH = 6;
	private static final String TOKEN_CHARS = "123456789ABCDFGHKLMNPRSTWZ";
	private static final Random tokenRandomizer = new Random();
	public static String generateViewToken()
	{
		char[] chars = new char[TOKEN_LENGTH];
		for (int i = 0; i < TOKEN_LENGTH; i++)
		{
			chars[i] = TOKEN_CHARS.charAt(tokenRandomizer.nextInt(TOKEN_CHARS.length()));
		}
		return new String(chars);
	}
}
